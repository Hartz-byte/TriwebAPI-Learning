--> CREATING DATABASE
create database workshop

--> MAKE THE DATABASE IN USE, NAMED AS workshop
use workshop

--> CREATING TABLE 1
create table teachers(
id int auto_increment not null primary key,
teacher_name varchar(255) not null,
mobile varchar(255) not null,
salary int
)

--> CREATING TABLE 2
create table classes(
id int not null auto_increment,
class_name varchar(255) not null,
teacher_id int not null,
primary key(id),
foreign key(teacher_id) references teachers(id)
)

--> CREATING TABLE 3
create table students(
id int not null auto_increment,
student_name varchar(255) not null,
class_id int not null,
mobile varchar(20) default 0,
primary key(id),
foreign key(class_id) references classes(id)
)

--> INSERTING IN TABLE teachers, USING MULTIPLE RECORDS
insert into teachers(teacher_name, mobile, salary) values('teacher 1', '1', 1000), ('teacher 2', '2', 2000), ('teacher 3', '3', 3000)

--> INSERTING IN TABLE OF ONE ROW BUT THE WHOLE VALUES AS ONE
insert into teachers values(4, 'teacher 4', '4', 4000)

--> INSERTING IN TABLE classes, WITH MULTIPLE RECORDS AND ALSO REGARDS TO THE FOREIGN KEY
insert into classes(class_name, teacher_id) values('class one', 1), ('class two', 2), ('class three', 3), ('class four', 4)

--> INSERTING IN TABLE students, WITH MULTIPLE RECORDS AND ALSO REGARDS TO THE FOREIGN KEY
insert into students(student_name, mobile, class_id) values('student 1', '11', 1), ('student 2', '22', 3), ('student 3', '33', 2), ('student 4', '44', 4), ('student 5', '55', 2), ('student 6', '66', 3);

--> <> implies to not (not 6)
select * from students where class_id <> 6

--> arrange in ascending order
select * from students where class_id <> 6 order by class_id

--> arrange in descending order
select * from students where class_id <> 6 order by class_id desc



--> limit (shows only the desired number of datas)
select * from students where class_id = 5 limit 2

--> max (shows the max salary from all)
select max(salary) from teachers;

--> min (shows the min salary from all)
select min(salary) from teachers;

--> count (shows the total)
select count(id) from teachers;

--> avg (shows the avg of all)
select avg(salary) from teachers;

--> sum (shows the sum of all)
select sum(salary) from teachers;


--> LIKE operator "_" for single char, "%" for multiple char
select * from students where student_name like 'student%'

--> to display all students from class 1,5 and 6 (in operator)
select * from students where class_id in(1,5,6)

--> 2nd highest salary (not in operator)
select max(salary) from teachers where salary not in (select max(salary) from teachers)


--> between
select * from teachers where salary between 2000 and 5000


--> JOINS - left join, right join, inner join, and cross join

--> left join
select *
from classes cl
left join teachers tr on cl.teacher_id = tr.id


--> LEFT JOIN
select cl.class_name, tr.teacher_name as class_teacher
from classes cl
left join teachers tr on cl.teacher_id = tr.id


--> union
select student_name from students
union
select teacher_name from teachers

--> group
select * from students
group by class_id

--> show number of students in each class
select count(*) from students
group by class_id


--> having (for aggregate function)
select class_id, count(*) as number_of_students from students
group by class_id
having number_of_students > 1



--> created a table for duplication
create table teachers_dup(
id int not null,
teacher_name varchar(255) not null,
mobile varchar(100) not null,
salary int
)

--> insert record from teachers table to teachers_dup table
insert into teachers_dup(id, teacher_name, mobile, salary)
select id, teacher_name, mobile, salary from teachers
where id = 2
